{"version":3,"sources":["slices/converterSlice.js","store.js","constants.js","components/spinner.gif","components/Spinner.js","components/Chart.js","components/Converter.js","App.js","reportWebVitals.js","index.js"],"names":["converterSlice","set","loading","currencyCode","currencyValues","code","rate","description","rate_float","currencyHistory","currencyLabels","getCurrentRate","currency","a","labelsArray","historyArray","axios","get","resCurrency","resHistory","data","bpi","Object","entries","key","value","noDecimal","Math","round","push","converterStore","create","devtools","CURRENCY_SYMBOLS","USD","EUR","JPY","PLN","VND","CHF","NZD","ARS","Spinner","src","spinner","alt","Chart","labels","history","className","datasets","label","length","borderColor","borderWidth","options","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","legend","fontSize","Converter","state","useEffect","input","decimalFormat","toFixed","Intl","NumberFormat","format","changeDecimals","name","defaultValue","onChange","e","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b017837.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst converterSlice = (set) => ({\n  loading: true,\n  currencyCode: \"USD\",\n  currencyValues: {\n    code: \"\",\n    rate: \"\",\n    description: \"\",\n    rate_float: null,\n  },\n  currencyHistory: [],\n  currencyLabels: [],\n  getCurrentRate: async (currency) => {\n    const labelsArray = [];\n    const historyArray = [];\n\n    set(() => ({ loading: true }));\n\n    const resCurrency = await axios.get(\n      `https://api.coindesk.com/v1/bpi/currentprice/${currency}.json`\n    );\n\n    const resHistory = await axios.get(\n      `https://api.coindesk.com/v1/bpi/historical/close.json?currency=${currency}`\n    );\n\n    set(() => ({ currencyCode: currency }));\n    set(() => ({ currencyValues: resCurrency.data.bpi[currency] }));\n\n    for (const [key, value] of Object.entries(resHistory.data.bpi)) {\n      const noDecimal = Math.round(value);\n      historyArray.push(noDecimal);\n      labelsArray.push(key);\n    }\n\n    set(() => ({ currencyLabels: labelsArray }));\n    set(() => ({ currencyHistory: historyArray }));\n\n    set(() => ({ loading: false }));\n  },\n});\n\nexport default converterSlice;\n","import create from \"zustand\";\nimport { devtools } from \"zustand/middleware\";\n\nimport converterSlice from \"./slices/converterSlice\";\n\nexport const converterStore = create(devtools(converterSlice));\n","export const CURRENCY_SYMBOLS = {\n  USD: \"$\",\n  EUR: \"€\",\n  JPY: \"¥\",\n  PLN: \"zł\",\n  VND: \"₫\",\n  CHF: \"Fr.\",\n  NZD: \"$\",\n  ARS: \"$\",\n};\n","export default __webpack_public_path__ + \"static/media/spinner.c7d9f081.gif\";","import React from \"react\";\n\nimport spinner from \"./spinner.gif\";\n\nexport const Spinner = () => {\n  return <img src={spinner} alt=\"loading asset\" />;\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Line } from \"react-chartjs-2\";\n\nexport const Chart = ({ labels, history, currency }) => {\n  return (\n    <div className=\"chart__bottom\">\n      <Line\n        data={{\n          labels: labels,\n          datasets: [\n            {\n              label: `Timeline of the price of Bitcoin to ${currency} for the last ${history.length} days`,\n              data: history,\n              borderColor: [\n                \"rgba(255, 99, 132, 1)\",\n                \"rgba(54, 162, 235, 1)\",\n                \"rgba(255, 206, 86, 1)\",\n                \"rgba(75, 192, 192, 1)\",\n                \"rgba(153, 102, 255, 1)\",\n                \"rgba(255, 159, 64, 1)\",\n              ],\n              borderWidth: 1,\n            },\n          ],\n        }}\n        options={{\n          maintainAspectRatio: false,\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  beginAtZero: true,\n                },\n              },\n            ],\n          },\n          legend: {\n            labels: {\n              fontSize: 14,\n            },\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Chart;\n\nChart.propTypes = {\n  labels: PropTypes.array,\n  history: PropTypes.array,\n  currency: PropTypes.string,\n};\n","import React, { useEffect } from \"react\";\n\n// state\nimport { converterStore } from \"../store\";\n\n// constants\nimport { CURRENCY_SYMBOLS } from \"../constants\";\n\n// components\nimport { Spinner } from \"./Spinner\";\nimport Chart from \"./Chart\";\n\nconst Converter = () => {\n  const getCurrentRate = converterStore((state) => state.getCurrentRate);\n  const loading = converterStore((state) => state.loading);\n  const currencyCode = converterStore((state) => state.currencyCode);\n  const currencyValues = converterStore((state) => state.currencyValues);\n  const currencyHistory = converterStore((state) => state.currencyHistory);\n  const currencyLabels = converterStore((state) => state.currencyLabels);\n\n  const { code, rate_float, description } = currencyValues;\n\n  useEffect(() => {\n    getCurrentRate(currencyCode);\n  }, [getCurrentRate, currencyCode]);\n\n  const changeDecimals = (input) => {\n    const decimalFormat = input.toFixed(2);\n    return new Intl.NumberFormat().format(decimalFormat);\n  };\n\n  return (\n    <div className=\"chart\">\n      {loading ? (\n        <Spinner />\n      ) : (\n        <div className=\"chart__container\">\n          <div className=\"chart__top\">\n            <div className=\"currency-info\">\n              <p className=\"currency-info__price\">\n                {CURRENCY_SYMBOLS[code]} {changeDecimals(rate_float)}\n              </p>\n              <select\n                name=\"currencies\"\n                defaultValue={code}\n                className=\"currency-info__select\"\n                onChange={(e) => {\n                  getCurrentRate(e.target.value);\n                }}\n              >\n                <option value=\"USD\">USD</option>\n                <option value=\"EUR\">EUR</option>\n                <option value=\"JPY\">JPY</option>\n                <option value=\"PLN\">PLN</option>\n                <option value=\"VND\">VND</option>\n                <option value=\"CHF\">CHF</option>\n                <option value=\"NZD\">NZD</option>\n                <option value=\"ARS\">ARS</option>\n              </select>\n            </div>\n          </div>\n          <Chart\n            currency={description}\n            labels={currencyLabels}\n            history={currencyHistory}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Converter;\n","import \"./css/App.css\";\n\n// components\nimport Convertor from \"./components/Converter\";\n\nfunction App() {\n  return (\n    <div className=\"main-container\">\n      <Convertor />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}